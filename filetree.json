{
  "nodes": [
    {
      "id": "channel_actions",
      "loc": 179,
      "group": 0,
      "content": "import * as ChannelApiUtil from '../util/channel_api_util';\n\nexport const RECEIVE_ALL_CHANNELS = \"RECEIVE_ALL_CHANNELS\";\nexport const RECEIVE_CHANNEL = \"RECEIVE_CHANNEL\";\nexport const REMOVE_CHANNEL = \"REMOVE_CHANNEL\";\nexport const CLEAR_CHANNELS = \"CLEAR_CHANNELS\";\nexport const RECEIVE_CHANNEL_ERRORS = \"RECEIVE_CHANNEL_ERRORS\";\nexport const CLEAR_CHANNEL_ERRORS = \"CLEAR_CHANNEL_ERRORS\";\n\nexport const receiveAllChannels = (channels) => {\n  return {\n    type: RECEIVE_ALL_CHANNELS,\n    channels,\n  };\n};\n\nexport const receiveChannel = (channel) => {\n  return {\n    type: RECEIVE_CHANNEL,\n    channel,\n  };\n};\n\nexport const removeChannel = (channelId) => {\n  return {\n    type: REMOVE_CHANNEL,\n    channelId,\n  };\n};\n\nexport const receiveChannelErrors = (errors) => {\n  return {\n    type: RECEIVE_CHANNEL_ERRORS,\n    errors,\n  };\n};\n\nexport const clearChannelErrors = () => {\n  return {\n    type: CLEAR_CHANNEL_ERRORS,\n  };\n};\n\nexport const clearChannels = () => {\n  return {\n    type: CLEAR_CHANNELS,\n  };\n};\n\nexport const fetchChannels = () => {\n  return (dispatch) => {\n    return ChannelApiUtil.fetchChannels()\n      .then(\n        (channels) => dispatch(receiveAllChannels(channels)),\n        (errors) => dispatch(receiveChannelErrors(errors))\n      );\n  };\n};\n\nexport const fetchChannel = (channelId) => {\n  return (dispatch) => {\n    return ChannelApiUtil.fetchChannel(channelId)\n      .then(\n        (channel) => dispatch(receiveChannel(channel)),\n        (errors) => dispatch(receiveChannelErrors(errors))\n      );\n  };\n};\n\nexport const createChannel = (channel, ids) => {\n  const user_ids = ids || [];\n  const options = {\n    change_visibility: true,\n    visible: true,\n    user_ids: user_ids,\n    change_subscription: false,\n    subscribe: true,\n  };\n  return (dispatch) => {\n    return ChannelApiUtil.createChannel(channel, options)\n      .then(\n        (channel) => dispatch(receiveChannel(channel)),\n        (errors) => dispatch(receiveChannelErrors(errors))\n      );\n  };\n};\n\nexport const updateChannel = (channel, options) => {\n  return (dispatch) => {\n    return ChannelApiUtil.updateChannel(channel, options)\n    .then(\n      (channel) => dispatch(receiveChannel(channel)),\n      (errors) => dispatch(receiveChannelErrors(errors))\n    );\n  };\n};\n\n\nexport const makeChannelVisible = (channel, ids) => {\n  const visible = {\n    change_visibility: true,\n    visible: true,\n    user_ids: ids,\n    change_subscription: false,\n    subscribe: true,\n  };\n  return (dispatch) => {\n    return ChannelApiUtil.updateChannel(channel, visible)\n    .then(\n      (channel) => dispatch(receiveChannel(channel)),\n      (errors) => dispatch(receiveChannelErrors(errors))\n    );\n  };\n};\n\n\nexport const makeChannelInvisible = (channel, ids) => {\n  const invisible = {\n    change_visibility: true,\n    visible: false,\n    user_ids: ids,\n    change_subscription: false,\n    subscribe: true,\n  };\n  return (dispatch) => {\n    return ChannelApiUtil.updateChannel(channel, invisible)\n    .then(\n      (channel) => dispatch(receiveChannel(channel)),\n      (errors) => dispatch(receiveChannelErrors(errors))\n    );\n  };\n};\n\nexport const subscribeUserIdsToChannel = (channel, ids) => {\n  const subscribe = {\n    change_visibility: false,\n    visible: false,\n    user_ids: ids,\n    change_subscription: true,\n    subscribe: true,\n  };\n  \n  return (dispatch) => {\n    return ChannelApiUtil.updateChannel(channel, subscribe)\n    .then(\n      (channel) => dispatch(receiveChannel(channel)),\n      (errors) => dispatch(receiveChannelErrors(errors))\n    );\n  };\n};\n\nexport const unsubscribeUserIdsFromChannel = (channel, ids) => {\n  const subscribe = {\n    change_visibility: false,\n    visible: false,\n    user_ids: ids,\n    change_subscription: true,\n    subscribe: false,\n  };\n  \n  return (dispatch) => {\n    return ChannelApiUtil.updateChannel(channel, subscribe)\n    .then(\n      () => dispatch(removeChannel(channel.id)),\n      (errors) => dispatch(removeChannel(channel.id))\n    );\n  };\n};\n\nexport const deleteChannel = (channelId) => {\n  return (dispatch) => {\n    return ChannelApiUtil.deleteChannel(channelId)\n      .then(\n        (channel) => dispatch(receiveChannel(channelId)),\n        (errors) => dispatch(receiveChannelErrors(errors))\n      );\n  };\n};\n"
    },
    {
      "id": "message_actions",
      "loc": 86,
      "group": 0,
      "content": "import * as MessageApiUtil from '../util/message_api_util';\n\nexport const RECEIVE_ALL_MESSAGES = \"RECEIVE_ALL_MESSAGES\";\nexport const RECEIVE_MESSAGE = \"RECEIVE_MESSAGE\";\nexport const REMOVE_MESSAGE = \"REMOVE_MESSAGE\";\nexport const RECEIVE_MESSAGE_ERRORS = \"RECEIVE_MESSAGE_ERRORS\";\nexport const CLEAR_MESSAGE_ERRORS = \"CLEAR_MESSAGE_ERRORS\";\nexport const CLEAR_MESSAGES = \"CLEAR_MESSAGES\";\n\nexport const receiveAllMessages = (messages) => {\n  return {\n    type: RECEIVE_ALL_MESSAGES,\n    messages,\n  };\n};\n\nexport const receiveMessage = (message) => {\n  return {\n    type: RECEIVE_MESSAGE,\n    message,\n  };\n};\n\nexport const removeMessage = (messageId) => {\n  return {\n    type: REMOVE_MESSAGE,\n    messageId,\n  };\n};\n\nexport const clearMessages = () => {\n  return {\n    type: CLEAR_MESSAGES,\n  };\n};\n\nexport const receiveMessageErrors = (errors) => {\n  return {\n    type: RECEIVE_MESSAGE_ERRORS,\n    errors,\n  };\n};\n\nexport const clearMessageErrors = () => {\n  return {\n    type: CLEAR_MESSAGE_ERRORS,\n  };\n};\n\n\nexport const fetchMessages = (channelId) => {\n  return (dispatch) => {\n    return MessageApiUtil.fetchMessages(channelId)\n      .then(\n        (messages) => dispatch(receiveAllMessages(messages)),\n        (errors) => dispatch(receiveMessageErrors(errors))\n      );\n  };\n};\n\nexport const fetchMessage = (messageId) => {\n  return (dispatch) => {\n    return MessageApiUtil.fetchMessage(messageId)\n      .then(\n        (message) => dispatch(receiveMessage(message)),\n        (errors) => dispatch(receiveMessageErrors(errors))\n      );\n  };\n};\n\nexport const createMessage = (message) => {\n  return (dispatch) => {\n    return MessageApiUtil.createMessage(message);\n  };\n};\n\nexport const deleteMessage = (messageId) => {\n  return (dispatch) => {\n    return MessageApiUtil.deleteMessage(messageId)\n      .then(\n        (message) => dispatch(receiveMessage(messageId)),\n        (errors) => dispatch(receiveMessageErrors(errors))\n      );\n  };\n};\n"
    },
    {
      "id": "session_actions",
      "loc": 84,
      "group": 0,
      "content": "import * as SessionApiUtil from '../util/session_api_util';\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_EMAIL = \"RECEIVE_EMAIL\";\nexport const REMOVE_SESSION_ERRORS = \"REMOVE_SESSION_ERRORS\";\n\nexport const receiveCurrentUser = (currentUser) => {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser,\n  };\n};\n\nexport const receiveSessionErrors = (errors) => {\n  return {\n    type: RECEIVE_SESSION_ERRORS,\n    errors,\n  };\n};\n\nexport const receiveEmail = (email) => {\n  return {\n    type: RECEIVE_EMAIL,\n    email,\n  };\n};\n\nexport const removeSessionErrors = () => {\n  return {\n    type: REMOVE_SESSION_ERRORS,\n  };\n};\n\nexport const signup = (user) => {\n  return (dispatch) => {\n    return SessionApiUtil.signup(user)\n      .then(\n        (user) => dispatch(receiveCurrentUser(user)),\n        (errors) => dispatch(receiveSessionErrors(errors))\n      );\n  };\n};\n\nexport const login = (user) => {\n  return (dispatch) => {\n    return SessionApiUtil.login(user)\n      .then(\n        (user) => dispatch(receiveCurrentUser(user)),\n        (errors) => dispatch(receiveSessionErrors(errors))\n      );\n  };\n};\n\nexport const logout = () => {\n  return (dispatch) => {\n    return SessionApiUtil.logout()\n      .then(\n        () => dispatch(receiveCurrentUser(null)),\n        (errors) => dispatch(receiveSessionErrors(errors))\n      );\n  };\n};\n\nexport const updateUser = (user) => {\n  return (dispatch) => {\n    return SessionApiUtil.updateUser(user)\n      .then(\n        (user) => dispatch(receiveCurrentUser(user)),\n        (errors) => dispatch(receiveSessionErrors(errors))\n      );\n  };\n};\n\nexport const rememberCurrentChannelId = (user, channelId) => {\n  return (dispatch) => {\n    return SessionApiUtil.updateUser(user, channelId)\n      .then(\n        (user) => dispatch(receiveCurrentUser(user)),\n        (errors) => dispatch(receiveSessionErrors(errors))\n      );\n  };\n};\n"
    },
    {
      "id": "ui_actions",
      "loc": 30,
      "group": 0,
      "content": "export const RECEIVE_DROPDOWN = \"RECEIVE_DROPDOWN\";\nexport const CLEAR_DROPDOWN = \"CLEAR_DROPDOWN\";\nexport const RECEIVE_DETAILS = \"RECEIVE_DETAILS\";\nexport const CLEAR_DETAILS = \"CLEAR_DETAILS\";\n\nexport const receiveDropdown = (dropdown) => {\n  return {\n    type: RECEIVE_DROPDOWN,\n    dropdown,\n  };\n};\n\nexport const clearDropdown = () => {\n  return {\n    type: CLEAR_DROPDOWN,\n  };\n};\n\nexport const receiveDetails = () => {\n  return {\n    type: RECEIVE_DETAILS,\n  };\n};\n\nexport const clearDetails = () => {\n  return {\n    type: CLEAR_DETAILS,\n  };\n};\n"
    },
    {
      "id": "user_actions",
      "loc": 36,
      "group": 0,
      "content": "import * as UserApiUtil from '../util/user_api_util';\nexport const RECEIVE_ALL_USERS = \"RECEIVE_ALL_USERS\";\n// export const RECEIVE_USER = \"RECEIVE_USER\";\nexport const RECEIVE_USER_ERRORS = \"RECEIVE_USER_ERRORS\";\nexport const CLEAR_USER_ERRORS = \"CLEAR_USER_ERRORS\";\n\nexport const receiveAllUsers = (users) => {\n  return {\n    type: RECEIVE_ALL_USERS,\n    users,\n  };\n};\n\nexport const receiveUserErrors = (errors) => {\n  return {\n    type: RECEIVE_USER_ERRORS,\n    errors,\n  };\n};\n\nexport const clearUserErrors = () => {\n  return {\n    type: CLEAR_USER_ERRORS,\n  };\n};\n\nexport const fetchUsers = () => {\n  return (dispatch) => {\n    return UserApiUtil.fetchUsers()\n      .then(\n        (user) => dispatch(receiveAllUsers(user)),\n        (errors) => dispatch(receiveUserErrors(errors))\n      );\n  };\n};\n"
    },
    {
      "id": "app",
      "loc": 56,
      "group": 1,
      "content": "import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { AuthRoute, ProtectedRoute } from '../util/route_util';\nimport { Switch } from 'react-router';\n\nimport Navbar from './navbar/navbar';\nimport SessionFormContainer from './session/session_form_container';\nimport WelcomePageContainer from './welcome_page/welcome_page_container';\nimport Footer from './footer/footer';\n\nimport WorkspaceContainer from './workspace/workspace_container';\n\nconst App = () => {\n  return (\n    <section className=\"app\">\n      <Switch>\n        <ProtectedRoute\n          component={WorkspaceContainer}\n          path=\"/channels/:channelId/details\"\n          />\n        <ProtectedRoute\n          component={WorkspaceContainer}\n          path=\"/channels/:channelId\"\n          />\n        <ProtectedRoute\n          component={WorkspaceContainer}\n          path=\"/channels\"\n          />\n        \n        <div>\n          <Route\n            component={Navbar} />\n          <Switch>\n            <AuthRoute\n              component={SessionFormContainer}\n              path=\"/login\"/>\n            <AuthRoute\n              component={SessionFormContainer}\n              path=\"/signup\"/>\n            <AuthRoute\n              component={SessionFormContainer}\n              path=\"/guest-login\"/>\n            <AuthRoute\n              component={WelcomePageContainer}\n              path=\"/\"/>\n          </Switch>\n          <Route\n            component={Footer} />\n        </div>\n      </Switch>\n    </section>\n  );\n};\n\nexport default App;\n"
    },
    {
      "id": "channel_details",
      "loc": 161,
      "group": 1,
      "content": "import React from 'react';\n\nclass ChannelDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.handleClose = this.handleClose.bind(this);\n    this.handleInvite = this.handleInvite.bind(this);\n  }\n  \n  handleClose() {\n    this.props.clearDetails();\n  }\n  \n  handleInvite() {\n    this.props.receiveDropdown(\"inviteIndex\");\n  }\n  \n  render () {\n    const channel = this.props.channel;\n    \n    const name = channel.name ? channel.name : '';\n    \n    let about;\n    if (channel.id) {\n      if (channel.is_dm) {\n        about = \"About this conversation\";\n      } else {\n        if (channel.is_private) {\n          about = (\n            <div>\n              About\n              <i className=\"fa fa-lock\" aria-hidden=\"true\"></i>\n              {channel.name}\n            </div>\n          );\n        } else {\n          about = `About #${channel.name}`;\n        }\n      }\n    }\n    \n    const byCreator = channel.creator ?\n      ` by ${channel.creator.username} ` : \"\";\n    \n    let date;\n    date = new Date(channel.created_at);\n    const month = \"January February March April May June July August September October November December\".split(' ')[date.getMonth()];\n    const createdString = channel.created_at ?\n      `Created ${byCreator} on ${month} ${date.getDate()}, ${date.getFullYear()}` : \"\";\n    \n    const description = channel.description ?\n      channel.description : \"No description available\";\n    \n    \n    const miniUsers = this.props.users.map((user) => {\n      return (\n        <div\n          className=\"channel-details-user-mini-item\"\n          key={user.id}>\n          <div className=\"channel-details-user-mini-icon\">\n            <img\n              className=\"profile-image-mini-round\"\n              src={user.avatar_url}\n              />\n          </div>\n          { user.username === this.props.currentUser.username ?\n            <div className=\"channel-details-user-mini-name\">\n              {user.username} (you)\n            </div>\n            :\n            <div className=\"channel-details-user-mini-name\">\n              {user.username}\n            </div>\n          }\n        </div>\n      );\n    });\n    \n    return (\n      <div className=\"channel-details\">\n        <div className=\"channel-details-header\">\n          <div className=\"channel-details-header-name\">\n            {about}\n          </div>\n          <div\n            className=\"channel-details-header-x\"\n            onClick={this.handleClose} >\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n          </div>\n        </div>\n        <div className=\"fullscreen-index-list-container-sidebar custom-scroll\">\n          <ul className=\"fullscreen-index-list-nonreversed\">\n            { !channel.is_dm && channel.id &&\n              <div className=\"channel-details-list-border\">\n                <div className=\"channel-details-list-header\">\n                  <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n                  <div>\n                    Channel Details\n                  </div>\n                </div>\n                <div className=\"channel-details-list-content\">\n                  <div className=\"channel-details-list-section-header\">\n                    Purpose\n                  </div>\n                  <div className=\"channel-details-list-section-body\">\n                    {description}\n                  </div>\n                  <div className=\"channel-details-list-section-header\">\n                    Created\n                  </div>\n                  <div className=\"channel-details-list-section-body\">\n                    {createdString}\n                  </div>\n                </div>\n              </div>\n            }\n            \n            { (!channel.is_dm || channel.user_count > 2) &&\n              channel.id &&\n\n              <div className=\"channel-details-list-members\">\n                <div className=\"channel-details-list-header\">\n                  <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\n                  <div>\n                    {channel.user_count} member{channel.user_count === 1 ? \"\" : \"s\"}\n                  </div>\n                </div>\n                {miniUsers}\n                <div\n                  className=\"channel-details-list-invite\"\n                  onClick={this.handleInvite}>\n                  Invite more people ...\n                </div>\n              </div>\n            }\n            \n            { (channel.is_dm && channel.user_count <= 2) &&\n              <div className=\"channel-details-list-user\">\n                <div className=\"fullscreen-index-list-item-left user\">\n                  <img className=\"profile-image-large\"\n                      src={channel.avatar_url} />\n                  <div className=\"fullscreen-index-list-item name\">\n                    {channel.name}\n                  </div>\n                </div>\n                <div className=\"fullscreen-index-list-item preview user\">\n                  <i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i>\n                </div>\n              </div>\n            }\n          </ul>\n        </div>\n          \n      </div>\n    );\n  }\n}\n\nexport default ChannelDetails;\n"
    },
    {
      "id": "channel_details_container",
      "loc": 27,
      "group": 1,
      "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport ChannelDetails from './channel_details';\nimport { clearDetails, receiveDropdown } from '../../../actions/ui_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  const channel = state.entities.channels[ownProps.match.params.channelId] || {};\n  const users = channel.users || {};\n  return {\n    channel: channel,\n    users: Object.values(users) || [],\n    currentUser: state.session.currentUser,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    receiveDropdown: (dropdown) => dispatch(receiveDropdown(dropdown)),\n    clearDetails: () => dispatch(clearDetails()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChannelDetails);\n"
    },
    {
      "id": "channel_form_container",
      "loc": 31,
      "group": 1,
      "content": "import ChannelForm from './channel_form';\nimport { connect } from 'react-redux';\nimport {\n  createChannel,\n  subscribeUserIdsToChannel,\n  clearChannelErrors,\n} from '../../../actions/channel_actions';\nimport { clearDropdown } from '../../../actions/ui_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  \n  return {\n    currentUser: state.session.currentUser,\n    errors: state.errors.channel\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createChannel: (channel) => dispatch(createChannel(channel)),\n    subscribeUserIdsToChannel: (channel, ids) => dispatch(subscribeUserIdsToChannel(channel, ids)),\n    clearDropdown: () => dispatch(clearDropdown()),\n    clearChannelErrors: () => dispatch(clearChannelErrors()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChannelForm);\n"
    },
    {
      "id": "channel_index_container",
      "loc": 22,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport ChannelIndex from './channel_index';\nimport { clearDropdown } from '../../../actions/ui_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    channels: Object.values(state.entities.channels),\n    dropdown: state.ui.dropdown,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    clearDropdown: () => dispatch(clearDropdown()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChannelIndex);\n"
    },
    {
      "id": "channel_form",
      "loc": 183,
      "group": 1,
      "content": "import React from 'react';\n\nclass ChannelForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      description: \"\",\n      is_private: false,\n      closeFlag: \"\",\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSwitch = this.handleSwitch.bind(this);\n    this.handleEscape = this.handleEscape.bind(this);\n  }\n  \n  componentDidMount() {\n    this.props.clearChannelErrors();\n    document.addEventListener(\"keydown\", this.handleEscape, false);\n  }\n  \n  componentWillUnmount(nextProps, nextState) {\n    document.removeEventListener(\"keydown\", this.handleEscape, false);\n  }\n  \n  handleEscape(e) {\n    if (e.keyCode === 27) {\n      this.handleClose();\n    }\n  }\n  \n  handleClose() {\n    this.props.clearChannelErrors();\n    this.setState({ closeFlag: \"closing\" });\n    setTimeout(() => {\n      this.props.clearDropdown();\n    }, 300);\n  }\n  \n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.clearChannelErrors();\n    this.props.createChannel(this.state).then(\n        response => {\n          const id = response.channel.id;\n          const user_id = this.props.currentUser.id;\n          this.props.subscribeUserIdsToChannel(response.channel, [this.props.currentUser.id]);\n          this.handleClose();\n          this.props.history.push(`/channels/${response.channel.id}`);\n        }\n      );\n  }\n  \n  handleChange(field) {\n    return (e) => {\n      this.setState({ [field]: e.target.value });\n    };\n  }\n  \n  handleSwitch(e) {\n    this.setState({ is_private: !this.state.is_private });\n  }\n  \n  render () {\n    const errors = this.props.errors.map((error, idx) => {\n      if (error === \"Name can't be blank\") {\n        error = \"Don't forget to name your channel\";\n      }\n      return (\n        <li key={idx}>\n          {error}\n        </li>\n      );\n    });\n    \n    const errorFlag = this.props.errors.length > 0 ? \"-error\" : \"\";\n    \n    return (\n      <div className={`fullscreen-container ${this.state.closeFlag}`}>\n        <div className={`fullscreen-inside ${this.state.closeFlag}`}>\n          <div\n            className=\"fullscreen-x\"\n            onClick={this.handleClose}>\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n            <div className=\"fullscreen-esc\">esc</div>\n          </div>\n          <div className=\"fullscreen-header\">\n            { this.state.is_private ?\n              \"Create a private channel\"\n              :\n              \"Create a channel\"\n            }\n          </div>\n          <div className=\"fullscreen-subheader\">\n            Channels are where your members communicate. They&rsquo;re best organized\n            around a topic - #leads, for example.\n          </div>\n          <form\n            className=\"channel-form-new\"\n            onSubmit={this.handleSubmit}>\n            <div className=\"fullscreen-input-switch-container\">\n              <label className=\"fullscreen-input-switch-box\">\n                <input\n                  className=\"fullscreen-input-switch-checkbox\"\n                  value={'asdf'}\n                  checked={this.state.is_private}\n                  onChange={this.handleSwitch}\n                  type=\"checkbox\" />\n                <div className=\"fullscreen-input-switch-slider\"></div>\n                <div className=\"fullscreen-input-switch-word\">\n                  { this.state.is_private ?\n                    \"Private\" : \"Public\"\n                  }\n                </div>\n              </label>\n              <div className=\"fullscreen-input-switch-text\">\n                { this.state.is_private ?\n                  \"This channel can only be joined or viewed by invite.\"\n                  :\n                  \"Anyone in your workspace can view and join this channel.\"\n                }\n              </div>\n            </div>\n            \n            <div className=\"fullscreen-input-container\">\n              <div className=\"fullscreen-input-header\">\n                <div className=\"fullscreen-input-title\">\n                  Name\n                </div>\n                { errors.length > 0 &&\n                  <div className=\"fullscreen-popup-errors\">\n                    {errors}\n                  </div>\n                }\n              </div>\n              <input\n                className={`channel-form-input${errorFlag}`}\n                type=\"text\"\n                onChange={this.handleChange(\"name\")}\n                value={this.state.name}\n                placeholder=\"e.g. leads\"\n                autoFocus />\n            </div>\n            \n            <div className=\"fullscreen-input-container\">\n              <div className=\"fullscreen-input-header\">\n                <div className=\"fullscreen-input-title\">\n                  Purpose\n                </div>\n                <div className=\"fullscreen-input-optional\">\n                  (optional)\n                </div>\n              </div>\n              <input\n                type=\"text\"\n                className=\"channel-form-input\"\n                onChange={this.handleChange(\"description\")}\n                value={this.state.description}/>\n            </div>\n            \n            <div\n              className=\"channel-form-button-container\">\n              <div\n                className=\"channel-form-cancel\"\n                onClick={this.handleClose}>\n                Cancel\n              </div>\n              \n              <input\n                className=\"channel-form-submit\"\n                type=\"submit\"\n                value=\"Create Channel\"/>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChannelForm;\n"
    },
    {
      "id": "channel_index",
      "loc": 137,
      "group": 1,
      "content": "import React from 'react';\nimport ChannelIndexItemContainer from './channel_index_item_container';\n\nclass ChannelIndex extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      closeFlag: \"\",\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.handleEscape = this.handleEscape.bind(this);\n  }\n  \n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleEscape, false);\n  }\n  \n  componentWillUnmount(nextProps, nextState) {\n    document.removeEventListener(\"keydown\", this.handleEscape, false);\n  }\n  \n  handleEscape(e) {\n    if (e.keyCode === 27) {\n      this.handleClose();\n    }\n  }\n  \n  handleClose() {\n    this.setState({ closeFlag: \"closing\" });\n    setTimeout(() => {\n      this.props.clearDropdown();\n    }, 300);\n  }\n  \n  render () {\n    const chans = this.props.channels.slice().reverse();\n    \n    let channels = [];\n    let channelsSubscribed = [];\n    if (this.props.dropdown === \"channelIndex\") {\n      channels = chans.filter((channel) => {\n        return !channel.is_dm && !channel.subscribed;\n      });\n      channelsSubscribed = chans.filter((channel) => {\n        return !channel.is_dm && channel.subscribed;\n      });\n    } else if (this.props.dropdown === \"messageIndex\") {\n      channels = chans.filter((channel) => {\n        return channel.is_dm;\n      });\n    }\n    \n    if (this.props.dropdown === \"messageIndex\") {\n      channels.sort((a, b) => {\n        const first = new Date(a.most_recent_activity);\n        const second = new Date(b.most_recent_activity);\n        return first > second ? 1 : -1;\n      });\n    } else {\n      channels.sort((a, b) => {\n        return b.name.toLowerCase().localeCompare(a.name.toLowerCase());\n      });\n      channelsSubscribed.sort((a, b) => {\n        return b.name.toLowerCase().localeCompare(a.name.toLowerCase());\n      });\n    }\n    \n    channels = channels.map((channel) => {\n      return (\n        <ChannelIndexItemContainer\n          key={channel.id}\n          channel={channel}\n          handleClose={this.handleClose} />\n        );\n    });\n    \n    channelsSubscribed = channelsSubscribed.map((channel) => {\n      return (\n        <ChannelIndexItemContainer\n          key={channel.id}\n          channel={channel}\n          handleClose={this.handleClose} />\n        );\n    });\n    \n    \n    return (\n      <div className={`fullscreen-container ${this.state.closeFlag}`}>\n        <div className={`fullscreen-inside ${this.state.closeFlag}`}>\n          <div\n            className=\"fullscreen-x\"\n            onClick={this.handleClose}>\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n            <div className=\"fullscreen-esc\">esc</div>\n          </div>\n          <div className=\"fullscreen-header\">\n            {\n              this.props.dropdown === \"channelIndex\" ?\n              \"Browse Channels\" :\n              \"View Messages\"\n            }\n          </div>\n          \n          <div className=\"fullscreen-index-list-container custom-scroll\">\n            { this.props.dropdown === \"channelIndex\" &&\n              channels.length > 0 &&\n              <div className=\"fullscreen-subheader\">\n                Channels you can join\n                <div className=\"fullscreen-subheader-underline\"></div>\n              </div>\n            }\n            \n            <ul className=\"fullscreen-index-list\">\n              {channels}\n            </ul>\n            \n            { this.props.dropdown === \"channelIndex\" &&\n              channelsSubscribed.length > 0 &&\n              <div className=\"fullscreen-subheader\">\n                Channels you belong to\n                <div className=\"fullscreen-subheader-underline\"></div>\n              </div>\n            }\n            \n            <ul className=\"fullscreen-index-list\">\n              {channelsSubscribed}\n            </ul>\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChannelIndex;\n"
    },
    {
      "id": "channel_index_item",
      "loc": 158,
      "group": 1,
      "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ChannelIndexItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.date = this.date.bind(this);\n    this.timeAgo = this.timeAgo.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  handleClick() {\n    this.props.handleClose();\n    if (this.props.channel.is_dm) {\n      this.props.makeChannelVisible(this.props.channel);\n    }\n  }\n  \n  date() {\n    if (!this.props.channel.created_at) return \"\";\n    \n    let [year, month, day] = this.props.channel.created_at\n      .split(\"T\")[0].split(\"-\");\n    const months = \"January February March April May June July August September October November December\"\n      .split(\" \");\n    const monthString = months[parseInt(month - 1)];\n    let dayStr = day;\n    day = parseInt(day);\n    switch (dayStr[dayStr.length-1]) {\n      case \"1\":\n        day += \"st\";\n        break;\n      case \"2\":\n        day += \"nd\";\n        break;\n      case \"3\":\n        day += \"rd\";\n        break;\n      default:\n        day += \"th\";\n    }\n    \n    return `${monthString} ${day}, ${year}`;\n  }\n  \n  timeAgo() {\n    const date = new Date(this.props.channel.most_recent_activity);\n    const now = new Date();\n    \n    const timeDif = (\n      now.getYear()*365*30*24*60 + now.getMonth()*30*24*60 +\n      now.getDate()*24*60 + now.getHours()*60 + now.getMinutes()\n    ) - (\n      date.getYear()*365*30*24*60 + date.getMonth()*30*24*60 +\n      date.getDate()*24*60 + date.getHours()*60 + date.getMinutes()\n    );\n    \n    if (timeDif < 1) {\n      return \"less than a minute ago\";\n    } else if (timeDif < 60) {\n      return `${Math.floor(timeDif)} minute${timeDif >= 2 ? \"s\" : \"\"} ago`;\n    } else if (timeDif < 60 * 24) {\n      const hours = timeDif / 60;\n      return `${Math.floor(hours)} hour${hours >= 2 ? \"s\" : \"\"} ago`;\n    } else if (timeDif < 60 * 24 * 30) {\n      const days = timeDif / 60 / 24;\n      return `${Math.floor(days)} day${days >= 2 ? \"s\" : \"\"} ago`;\n    } else if (timeDif < 60 + 24 * 30 * 12) {\n      const months = timeDif / 60 / 24 / 30;\n      return `${Math.floor(months)} month${months >= 2 ? \"s\" : \"\"} ago`;\n    } else {\n      const years = timeDif / 60 / 24 / 30 / 365;\n      return `${Math.floor(years)} year${years >= 2 ? \"s\" : \"\"} ago`;\n    }\n  }\n  \n  render () {\n    const userCount = this.props.channel.user_count;\n    let description;\n    if (this.props.channel.description) {\n      description = (\n        <div className=\"fullscreen-index-list-item description\">\n          {this.props.channel.description}\n        </div>\n      );\n    }\n    \n    const date = this.date();\n    \n    let prefix;\n    if (this.props.channel.is_dm) {\n      prefix = (\n        <img className=\"profile-image\"\n            src={this.props.channel.avatar_url} />\n      );\n    } else {\n      if (this.props.channel.is_private) {\n        prefix = (\n          <div className=\"fullscreen-index-list-item-symbol\">\n            <i className=\"fa fa-lock\" aria-hidden=\"true\"></i>&nbsp;\n          </div>\n        );\n      } else {\n        prefix = (\n          <div className=\"fullscreen-index-list-item-symbol\">\n            #\n          </div>\n        );\n      }\n    }\n    \n    return (\n      <Link\n        className=\"fullscreen-index-list-li\"\n        to={`/channels/${this.props.channel.id}`}\n        onClick={this.handleClick}>\n        <div className=\"fullscreen-index-list-item-left\">\n          <div className=\"fullscreen-index-list-item title\">\n            {prefix}\n            <div className=\"fullscreen-index-list-item name\">\n              {this.props.channel.name}\n            </div>\n          </div>\n          \n          { !this.props.channel.is_dm &&\n            <div className=\"fullscreen-index-list-item date\">\n              Created on {date}\n            </div>\n          }\n          {\n            !this.props.channel.is_dm &&\n            description\n          }\n        </div>\n        { this.props.channel.is_dm ?\n          <div className=\"fullscreen-index-list-item users\">\n            {this.timeAgo()}\n          </div>\n            :\n          <div className=\"fullscreen-index-list-item users\">\n            <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i> {userCount}\n          </div>\n        }\n        <div className=\"fullscreen-index-list-item preview\">\n          <i className=\"fa fa-sign-in\" aria-hidden=\"true\"></i>\n          <div>\n            { !this.props.channel.subscribed &&\n              \"preview\"\n            }\n          </div>\n        </div>\n      </Link>\n    );\n  }\n}\n\nexport default ChannelIndexItem;\n"
    },
    {
      "id": "channel_index_item_container",
      "loc": 21,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport ChannelIndexItem from './channel_index_item';\nimport { makeChannelVisible } from '../../../actions/channel_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    \n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    makeChannelVisible: (channel) => dispatch(makeChannelVisible(channel)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChannelIndexItem);\n"
    },
    {
      "id": "channel_sidebar_container",
      "loc": 22,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport ChannelSidebar from './channel_sidebar';\nimport { receiveDropdown } from '../../../actions/ui_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    channels: Object.values(state.entities.channels),\n    selectedChannelId: ownProps.match.params.channelId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    receiveDropdown: (dropdown) => dispatch(receiveDropdown(dropdown)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChannelSidebar);\n"
    },
    {
      "id": "channel_sidebar_item",
      "loc": 69,
      "group": 1,
      "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ChannelSidebarItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleHideChannel = this.handleHideChannel.bind(this);\n  }\n  \n  handleHideChannel() {\n    this.props.makeChannelInvisible(this.props.channel);\n  }\n  \n  render () {\n    const channel = this.props.channel;\n    \n    const selected = channel.id === this.props.selectedChannelId ?\n      \"selected\" : \"\";\n    \n    let name;\n    if (channel.name) {\n      if (!channel.is_dm) {\n        if (channel.is_private) {\n          name = (\n            <div>\n              <i className=\"fa fa-lock\" aria-hidden=\"true\"></i>&nbsp;\n                {channel.name}\n              </div>\n            );\n          } else {\n            name = `# ${channel.name}`;\n          }\n      } else if (channel.user_count > 2) {\n        name = `(${channel.user_count - 1}) ${channel.name}`;\n      } else {\n        name = channel.name;\n      }\n    }\n    \n    return (\n      <li className={`sidebar-section-item button ${selected}`}>\n        <Link\n\n          to={`/channels/${channel.id}${this.props.details}`}>\n          <div className=\"sidebar-section-item-inner\">\n            {name}\n          </div>\n        </Link>\n        \n        { this.props.type === \"message\" &&\n          (\n            selected ?\n            <Link to={`/channels/${this.props.nextChannelId}/${this.props.details}`}\n              onClick={this.handleHideChannel}>\n              <i className=\"fa fa-times-circle-o\"></i>\n            </Link>\n            :\n            <i\n              onClick={this.handleHideChannel}\n              className=\"fa fa-times-circle-o\"></i>\n          )\n        }\n      </li>\n    );\n  }\n}\n\nexport default ChannelSidebarItem;\n"
    },
    {
      "id": "channel_sidebar",
      "loc": 110,
      "group": 1,
      "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ChannelSidebarItemContainer from './channel_sidebar_item_container';\n\n\nclass ChannelSidebar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChannelNew = this.handleChannelNew.bind(this);\n    this.handleChannelIndex = this.handleChannelIndex.bind(this);\n    this.handleMessageNew = this.handleMessageNew.bind(this);\n    this.handleMessageIndex = this.handleMessageIndex.bind(this);\n  }\n  \n  handleChannelNew() {\n    this.props.receiveDropdown(\"channelNew\");\n  }\n  \n  handleChannelIndex() {\n    this.props.receiveDropdown(\"channelIndex\");\n  }\n  \n  handleMessageNew() {\n    this.props.receiveDropdown(\"messageNew\");\n  }\n  \n  handleMessageIndex() {\n    this.props.receiveDropdown(\"messageIndex\");\n  }\n  \n  render () {\n    const channels = this.props.channels\n      .filter((channel) => {\n        return channel.visible && !channel.is_dm;\n      })\n      .map((channel) => {\n        return (\n          <ChannelSidebarItemContainer\n            key={channel.id}\n            channel={channel}\n            type={\"channel\"}\n            selectedChannelId={this.props.selectedChannelId}/>\n        );\n      });\n    \n    const dms = this.props.channels\n      .filter((channel) => {\n        return channel.visible && channel.is_dm;\n      })\n      .map((channel) => {\n        return (\n          <ChannelSidebarItemContainer\n            key={channel.id}\n            channel={channel}\n            type={\"message\"}\n            selectedChannelId={this.props.selectedChannelId}/>\n        );\n      });\n    \n    return (\n      <div className=\"sidebar-section\">\n        <div className=\"sidebar-section-header\">\n          <div\n            className=\"sidebar-section-title channels link sidebar-hoverable\"\n            onClick={this.handleChannelIndex}>\n            Channels\n          </div>\n          <div className=\"sidebar-info-bubble\">\n            Browse All Channels\n          </div>\n          <i\n            onClick={this.handleChannelNew}\n            className=\"sidebar-hoverable fa fa-plus link\"\n            aria-hidden=\"true\"></i>\n          <div className=\"sidebar-info-bubble new\">\n            Open a new channel\n          </div>\n        </div>\n        <ul className=\"sidebar-section-items channels\">\n          {channels}\n        </ul>\n        \n        \n        <div className=\"sidebar-section-header\">\n          <div\n            onClick={this.handleMessageIndex}\n            className=\"sidebar-section-title channels link sidebar-hoverable\">\n            Direct Messages\n          </div>\n          <div className=\"sidebar-info-bubble\">\n            Browse all direct messages\n          </div>\n          <i\n            onClick={this.handleMessageNew}\n            className=\"sidebar-hoverable fa fa-plus link\"\n            aria-hidden=\"true\"></i>\n          <div className=\"sidebar-info-bubble dm-2\">\n            Open a direct message\n          </div>\n        </div>\n        <ul className=\"sidebar-section-items channels\">\n          {dms}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ChannelSidebar;\n"
    },
    {
      "id": "channel_sidebar_item_container",
      "loc": 24,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport ChannelSidebarItem from './channel_sidebar_item';\nimport { makeChannelInvisible } from '../../../actions/channel_actions';\nimport { findNextChannelId } from '../../../util/find_next_channel_id.js';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    selectedChannelId: parseInt(ownProps.selectedChannelId),\n    nextChannelId: findNextChannelId(state.entities.channels),\n    details: state.ui.details,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    makeChannelInvisible: (channel) => dispatch(makeChannelInvisible(channel)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChannelSidebarItem);\n"
    },
    {
      "id": "chat_header",
      "loc": 202,
      "group": 1,
      "content": "import React from 'react';\nimport Modal from 'react-modal';\n\nclass ChatHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      nameModal: false,\n      settingsModal: false,\n    };\n    \n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.handleInvite = this.handleInvite.bind(this);\n    this.handleLeave = this.handleLeave.bind(this);\n    this.handleJoin = this.handleJoin.bind(this);\n    this.handleInfo = this.handleInfo.bind(this);\n  }\n  \n  openModal(modal) {\n    return () => {\n      this.setState({ [modal]: true });\n    };\n  }\n  \n  closeModal() {\n    this.setState({\n      nameModal: false,\n      settingsModal: false,\n    });\n  }\n  \n  handleJoin() {\n    this.props.subscribeUserIdsToChannel(this.props.channel, [this.props.currentUser.id])\n      .then(\n        response => {\n          this.closeModal();\n        }\n      );\n  }\n  \n  handleInvite() {\n    this.props.receiveDropdown(\"inviteIndex\");\n    this.closeModal();\n  }\n  \n  handleLeave() {\n    this.props.unsubscribeUserIdsFromChannel(\n      this.props.channel,\n      [this.props.currentUser.id]\n    );\n    \n    this.props.history.push(`/channels/${this.props.nextChannelId}`);\n    this.closeModal();\n  }\n  \n  handleInfo() {\n    if (this.props.details) {\n      this.props.clearDetails();\n    } else {\n      this.props.receiveDetails();\n    }\n  }\n  \n  modal(field) {\n    let cssName;\n    switch (field) {\n      case \"nameModal\":\n        cssName = \"name-modal\";\n        break;\n      case \"settingsModal\":\n        cssName = \"settings-modal\";\n        break;\n      default:\n        return \"\";\n    }\n    \n    const isGeneral = this.props.channel.name === 'general';\n    const isSubscribed = this.props.channel.subscribed;\n    const isDm = this.props.channel.is_dm;\n    \n    return (\n      <Modal\n        className={`modal-interior ${cssName}`}\n        overlayClassName=\"modal-overlay\"\n        isOpen={this.state[field]}\n        onRequestClose={this.closeModal}>\n        \n        {isSubscribed &&\n          <div\n            className=\"modal-button\"\n            onClick={this.handleInvite}>\n            {\n              isDm ?\n              \"Invite another member ...\" :\n              \"Invite new members to join ...\"\n            }\n            \n          </div>\n        }\n        \n        {!isGeneral && isSubscribed && !isDm &&\n          <div\n            className=\"modal-button\"\n            onClick={this.handleLeave}>\n            Leave #{this.props.channel.name}\n          </div>\n        }\n        \n        {!isSubscribed && !isDm &&\n          <div\n            className=\"modal-button\"\n            onClick={this.handleJoin}>\n            Join #{this.props.channel.name}\n          </div>\n        }\n      </Modal>\n    );\n  }\n  \n  \n  render () {\n    const channel = this.props.channel;\n    let name;\n    if (channel.name) {\n      if (channel.is_dm) {\n        name = channel.name;\n      } else {\n        if (channel.is_private) {\n          name = (\n            <div>\n              <i className=\"fa fa-lock\" aria-hidden=\"true\"></i>&nbsp;\n              {channel.name}\n            </div>\n          );\n        } else {\n          name = `# ${channel.name}`;\n        }\n      }\n    }\n    \n    const userCount = channel.user_count;\n    return (\n      <div className=\"chat-header\">\n        \n        <div className=\"chat-header-left\">\n          <div\n            className=\"chat-header-left-title button\"\n            onClick={this.openModal(\"nameModal\")}>\n            {name}\n          </div>\n          <div className=\"chat-header-left-options\">\n            <div\n              className=\"chat-header-left-options blue-hover button chat-hoverable\"\n              onClick={this.handleInfo}>\n              <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\n              <div>{userCount}</div>\n            </div>\n            <div className=\"chat-info-bubble users\">\n              {\n                this.props.details ?\n                \"Hide Member List\"\n                :\n                \"View Member List\"\n              }\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"chat-header-right\">\n          <div className=\"chat-header-right-options info blue-hover button chat-hoverable\"\n            onClick={this.handleInfo}>\n            <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n          </div>\n          <div className=\"chat-info-bubble details\">\n            {\n              this.props.details ?\n              \"Hide Channel Details\"\n              :\n              \"Show Channel Details\"\n            }\n          </div>\n          \n          <div\n            className=\"chat-header-right-options settings blue-hover button chat-hoverable\"\n            onClick={this.openModal(\"settingsModal\")}>\n            <i className=\"fa fa-cog\" aria-hidden=\"true\"></i>\n          </div>\n          <div className=\"chat-info-bubble settings\">\n            Channel Settings\n          </div>\n        </div>\n        \n        {this.modal(\"nameModal\")}\n        {this.modal(\"settingsModal\")}\n      </div>\n    );\n  }\n}\n\nexport default ChatHeader;\n"
    },
    {
      "id": "chat_header_container",
      "loc": 38,
      "group": 1,
      "content": "import ChatHeader from './chat_header';\nimport { connect } from 'react-redux';\nimport {\n  subscribeUserIdsToChannel,\n  unsubscribeUserIdsFromChannel,\n} from '../../actions/channel_actions';\nimport {\n  receiveDropdown,\n  receiveDetails,\n  clearDetails,\n} from '../../actions/ui_actions';\nimport { findNextChannelId } from '../../util/find_next_channel_id.js';\n\nconst mapStateToProps = (state, ownProps) => {\n  let channel = state.entities.channels[ownProps.match.params.channelId] || {};\n  return {\n    channel: channel,\n    currentUser: state.session.currentUser,\n    nextChannelId: findNextChannelId(state.entities.channels),\n    details: state.ui.details,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    receiveDropdown: (dropdown) => dispatch(receiveDropdown(dropdown)),\n    receiveDetails: () => dispatch(receiveDetails()),\n    clearDetails: () => dispatch(clearDetails()),\n    subscribeUserIdsToChannel: (channel, ids) => dispatch(subscribeUserIdsToChannel(channel, ids)),\n    unsubscribeUserIdsFromChannel: (channel, ids) => dispatch(unsubscribeUserIdsFromChannel(channel, ids)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChatHeader);\n"
    },
    {
      "id": "message_form",
      "loc": 78,
      "group": 1,
      "content": "import React from 'react';\n\nclass MessageForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { body: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleJoin = this.handleJoin.bind(this);\n  }\n  \n  handleChange(e) {\n    this.setState({ body: e.target.value });\n  }\n  \n  handleJoin() {\n    this.props.subscribeUserIdsToChannel(\n      this.props.channel,\n      [this.props.currentUser.id]\n    );\n  }\n  \n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.body) {\n      this.props.createMessage(this.state);\n      this.setState({ body: \"\" });\n    }\n  }\n  \n  render () {\n    const channel = this.props.channel;\n    let placeholder = \"Message \";\n    if (!channel.is_dm && !channel.is_private) {\n      placeholder += \"#\";\n    }\n    placeholder += channel.name;\n    \n    const input = channel.subscribed ?\n      (\n        <div className=\"message-form-input-wrapper\">\n          <input\n            className=\"message-form-input\"\n            type=\"text\"\n            onChange={this.handleChange}\n            placeholder={placeholder}\n            autoFocus\n            value={this.state.body}\n            key={channel.id}/>\n          <div className=\"message-form-plus\">\n            \n          </div>\n        </div>\n      ) : (\n        <div className=\"message-form-join-wrapper\">\n          <div\n            className=\"message-form-join-button\"\n            onClick={this.handleJoin}>\n            Join Channel\n          </div>\n        </div>\n      );\n    \n    return (\n      <div className=\"message-form\">\n        <form\n          className=\"message-form-form\"\n          onSubmit={this.handleSubmit}>\n          \n          {input}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MessageForm;\n"
    },
    {
      "id": "message_form_container",
      "loc": 23,
      "group": 1,
      "content": "import MessageForm from './message_form';\nimport { connect } from 'react-redux';\nimport { createMessage } from '../../actions/message_actions';\nimport { subscribeUserIdsToChannel } from '../../actions/channel_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    currentUser: state.session.currentUser,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createMessage: (message) => dispatch(createMessage(message)),\n    subscribeUserIdsToChannel: (channel, ids) => dispatch(subscribeUserIdsToChannel(channel, ids)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessageForm);\n"
    },
    {
      "id": "footer",
      "loc": 30,
      "group": 1,
      "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst footer = () => {\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        <Link to=\"/\">\n          <div className=\"footer-logo\">\n            <i className=\"fa fa-hashtag\" aria-hidden=\"true\"></i>\n          </div>\n        </Link>\n        <ul className=\"footer-categories\">\n          <ul className=\"footer-list\">\n            <li><a href=\"#\">About Me</a></li>\n          </ul>\n          <ul className=\"footer-list\">\n            <li><a href=\"https://github.com/hanhee-song/slic\"  target=\"_blank\"><i className=\"fa fa-github\" aria-hidden=\"true\"></i> Github</a></li>\n          </ul>\n          <ul className=\"footer-list\">\n            <li><a href=\"https://www.linkedin.com/in/hanhee-song-641291127/\"  target=\"_blank\"><i className=\"fa fa-linkedin\" aria-hidden=\"true\"></i> Linkedin</a></li>\n          </ul>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default footer;\n"
    },
    {
      "id": "message_index",
      "loc": 142,
      "group": 1,
      "content": "import React from 'react';\nimport MessageIndexItemContainer from './message_index_item_container';\nimport MessageFormContainer from './message_form_container';\nimport { Route } from 'react-router-dom';\n\nclass MessageIndex extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    if (this.props.match.params.channelId !== nextProps.match.params.channelId) {\n      this.props.fetchMessages(nextProps.match.params.channelId);\n      \n      pusher.unsubscribe(`channel-connection-${this.props.match.params.channelId}`);\n      \n      var channel = pusher.subscribe(`channel-connection-${nextProps.match.params.channelId}`);\n      channel.bind('create-message', (message) => {\n        this.props.receiveMessage(message);\n      });\n      \n      const element = document.querySelector(\".message-index-overflow-wrapper\");\n      element.scrollTop = 0;\n    }\n  }\n  \n  componentDidMount() {\n    this.props.fetchMessages(this.props.match.params.channelId);\n    var channel = pusher.subscribe(`channel-connection-${this.props.match.params.channelId}`);\n    channel.bind('create-message', (message) => {\n      this.props.receiveMessage(message);\n    });\n    \n    document.querySelector('.message-index-overflow-wrapper')\n      .addEventListener('wheel', (e) => this.flipWheel(e));\n  }\n  \n  flipWheel(e) {\n    if(e.deltaY) {\n      e.preventDefault();\n      e.currentTarget.scrollTop -= parseFloat(getComputedStyle(e.currentTarget)\n        .getPropertyValue('font-size')) * (e.deltaY) / 15;\n    }\n  }\n  \n  componentWillUnmount() {\n    document.querySelector('.message-index-overflow-wrapper')\n      .removeEventListener(\"wheel\", (e) => this.flipWheel(e));\n    pusher.unsubscribe(`channel-connection-${this.props.match.params.channelId}`);\n  }\n  \n  render () {\n    const messages = this.props.messages.map((message) => {\n      return (\n        <MessageIndexItemContainer\n          key={message.id}\n          message={message}/>\n      );\n    });\n    \n    let message = \"\";\n    let beginningMessage;\n    \n    const channel = this.props.channel;\n    if (channel.id) {\n      let name;\n      if (channel.is_dm) {\n        name = channel.name;\n      } else if (channel.is_private) {\n        name = (<div>\n            <i className=\"fa fa-lock\" aria-hidden=\"true\"></i>&nbsp;\n            {channel.name}\n          </div>);\n      } else {\n        name = `#${channel.name}`;\n      }\n      \n      if (channel.creator && channel.creator.username) {\n        const date = new Date(channel.created_at);\n        const today = new Date();\n        const thisMonth = \"January February March April May June July August September October November December\".split(' ')[today.getMonth()];\n        const month = \"January February March April May June July August September October November December\".split(' ')[date.getMonth()];\n        \n        let time;\n        if (thisMonth === month && today.getDate() === date.getDate()) {\n          time = \" today\";\n        } else {\n          time = ` on ${month} ${date.getDate()}`;\n        }\n      \n        if (channel.creator.id === this.props.currentUser.id) {\n          message += `You created this channel${time}.`;\n        } else if (channel.creator.id) {\n          message += `${channel.creator.username} created this channel${time}.`;\n        }\n      }\n      \n      if (channel.is_dm) {\n        message += ` This is the start of your conversation with ${channel.name}`;\n      } else if (channel.is_private) {\n        message += ` This is the very beginning of the ${channel.name} private channel.`;\n      } else {\n        message += ` This is the very beginning of the #${channel.name} channel.`;\n      }\n      \n      if (channel.description) {\n        message += ` Purpose: ${channel.description}`;\n      }\n      \n      beginningMessage = (\n        <div\n          key={channel.id}\n          className=\"message-index-item-beginning\">\n          <div className=\"message-index-item-beginning-header\">\n            {name}\n          </div>\n          <div className=\"message-index-item-beginning-body\">\n            {message}\n          </div>\n          <div className=\"message-index-item-break\"></div>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"message-container\">\n        <div className=\"message-index-overflow-wrapper custom-scroll\">\n          <div className=\"message-index\">\n            {beginningMessage}\n            {messages}\n          </div>\n          \n        </div>\n        <MessageFormContainer\n          channel={channel} />\n      </div>\n    );\n  }\n}\n\nexport default MessageIndex;\n"
    },
    {
      "id": "message_index_container",
      "loc": 25,
      "group": 1,
      "content": "import MessageIndex from './message_index';\nimport { connect } from 'react-redux';\nimport { fetchMessages, receiveMessage } from '../../actions/message_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  const channel = state.entities.channels[ownProps.match.params.channelId] || {};\n  return {\n    channel: channel,\n    messages: Object.values(state.entities.messages) || [],\n    currentUser: state.session.currentUser,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchMessages: (channelId) => dispatch(fetchMessages(channelId)),\n    receiveMessage: (channelId) => dispatch(receiveMessage(channelId)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessageIndex);\n"
    },
    {
      "id": "message_index_item",
      "loc": 49,
      "group": 1,
      "content": "import React from 'react';\n\nclass MessageIndexItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.date = this.date.bind(this);\n  }\n  \n  date() {\n    let time = this.props.message.created_at\n      .split(\"T\")[1].split(\":\");\n    let minute = time[1];\n    const offset = new Date().getTimezoneOffset() / 60;\n    let hour = parseInt(time[0]) - (offset);\n    hour = hour <= 0 ? hour + 24 : hour;\n    const suffix = hour >= 12 && hour !== 24 ? \"PM\" : \"AM\";\n    hour = hour > 12 ? hour - 12 : hour;\n    return `${hour}:${minute} ${suffix}`;\n  }\n  \n  render () {\n    return (\n      <div className=\"message-index-item\">\n        <div className=\"message-index-item-profile-image profile-image\">\n          <img className=\"profile-image\"\n              src={this.props.message.author.avatar_url} />\n        </div>\n        \n        <div className=\"message-index-item-content\">\n          <div className=\"message-index-item-header\">\n            <div className=\"message-index-item-name\">\n              {this.props.message.author.username}\n            </div>\n            <div className=\"message-index-item-time\">\n              {this.date()}\n            </div>\n          </div>\n          \n          <div className=\"message-index-item-body\">\n            {this.props.message.body}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MessageIndexItem;\n"
    },
    {
      "id": "message_index_item_container",
      "loc": 20,
      "group": 1,
      "content": "import MessageIndexItem from './message_index_item';\nimport { connect } from 'react-redux';\n  \nconst mapStateToProps = (state, ownProps) => {\n  return {\n    \n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    \n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessageIndexItem);\n"
    },
    {
      "id": "root",
      "loc": 17,
      "group": 1,
      "content": "import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './app';\n\nconst Root = ({ store }) => {\n  return (\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  );\n};\n\nexport default Root;\n"
    },
    {
      "id": "navbar",
      "loc": 21,
      "group": 1,
      "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = (props) => {\n  return (\n    <div className=\"navbar-container\">\n      <div className=\"navbar\">\n      <Link to=\"/\">\n        <div className=\"nav-logo\">\n          <i className=\"fa fa-hashtag\" aria-hidden=\"true\"></i> Slic\n        </div>\n      </Link>\n        <ul className=\"nav-buttons\">\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n"
    },
    {
      "id": "session_form",
      "loc": 188,
      "group": 1,
      "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Typed from 'typed.js';\n\nclass SessionForm extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      email: props.email,\n      username: \"\",\n      password: \"\",\n      submitTimeout: null,\n      typeUsername: null,\n      typePassword: null,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.cleanUp = this.cleanUp.bind(this);\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    if (this.props.formType !== nextProps.formType\n      && this.props.formType !== \"/guest-login\") {\n      this.cleanUp();\n      this.setState({\n        username: \"\",\n        password: \"\",\n        email: \"\",\n      });\n    }\n    \n    // Guest Login\n    if (nextProps.formType === \"/guest-login\") {\n      this.generateGuest();\n    }\n  }\n  \n  componentDidMount() {\n    // Guest Login\n    if (this.props.formType === \"/guest-login\") {\n      this.generateGuest();\n    }\n  }\n  \n  generateGuest() {\n    if (!this.state.submitTimeout) {\n      const guest = {\n        username: 'slic-guest',\n        password: 'asdfasdf',\n      };\n      \n      const userOptions = {\n        strings: [guest.username],\n        typeSpeed: 40,\n      };\n      const passOptions = {\n        strings: [guest.username],\n        typeSpeed: 40,\n      };\n      let typed;\n      this.setState({\n        typeUsername: setTimeout(() => {\n          new Typed(\".session-form .username\", userOptions);\n        }, 100),\n        typePassword: setTimeout(() => {\n          new Typed(\".session-form .password\", passOptions);\n        }, 1000),\n        submitTimeout: setTimeout(() => {\n          this.props.submitForm(guest);\n        }, 2000)\n      });\n    }\n    \n  }\n  \n  componentWillUnmount() {\n    this.cleanUp();\n  }\n  \n  cleanUp() {\n    this.props.removeSessionErrors();\n    clearTimeout(this.state.submitTimeout);\n    clearTimeout(this.state.typePassword);\n    clearTimeout(this.state.typeUsername);\n  }\n  \n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.submitTimeout) {\n      this.props.removeSessionErrors();\n      const user = {\n        username: this.state.username,\n        password: this.state.password,\n      };\n      this.props.submitForm(user);\n    }\n  }\n  \n  handleChange(field) {\n    return (e) => {\n      this.setState({ [field]: e.target.value });\n    };\n  }\n  \n  render () {\n    const signup = this.props.formType === \"/signup\";\n    \n    const header = signup ?\n      \"Create an Account\" : \"Sign in to Slic\";\n    \n    \n    const button = signup ?\n      \"Get started\" : \"Sign in\";\n    \n    const errors = this.props.errors.map((error, idx) => (\n      <li\n        className=\"session-error\"\n        key={idx}>\n        {error}\n      </li>\n    ));\n    \n    const alternateSession = (\n      signup ?\n      <div className=\"session-alternate\">\n        Already have an account? <Link to=\"/login\">Log In</Link> or <Link to=\"/guest-login\">Guest Login</Link>\n      </div> :\n      <div className=\"session-alternate\">\n        Don't have an account yet? <Link to=\"/signup\">Sign Up</Link> or <Link to=\"/guest-login\">Guest Login</Link>\n      </div>\n    );\n    \n    return (\n      <div className=\"session-container\">\n        <div className=\"session-box\">\n          <form\n            className=\"session-form\"\n            onSubmit={this.handleSubmit}>\n            \n            <div className=\"session-form-header\">\n              {header}\n            </div>\n            \n            {errors.length > 0 ?\n              <ul className=\"session-errors\">{errors}</ul> : null}\n            \n            <div className=\"session-form-subheader\">\n              Enter your <strong>username</strong> and <strong>password</strong>\n            </div>\n              \n            <input\n              className=\"session-input username\"\n              type=\"text\"\n              value={this.state.username}\n              onChange={this.handleChange(\"username\")}\n              placeholder=\"Username\"\n              autoFocus\n              key={this.props.formType}\n              />\n            {signup &&\n              <input\n                className=\"session-input\"\n                type=\"text\"\n                value={this.state.email}\n                onChange={this.handleChange(\"email\")}\n                placeholder=\"Email Address\"/>\n            }\n            <input\n              className=\"session-input password\"\n              type=\"password\"\n              value={this.state.password}\n              onChange={this.handleChange(\"password\")}\n              placeholder=\"Password\"/>\n                            \n            <input\n              className=\"session-button\"\n              type=\"submit\"\n              value={button} />\n            \n          </form>\n          {alternateSession}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SessionForm;\n"
    },
    {
      "id": "session_form_container",
      "loc": 33,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport SessionForm from './session_form';\nimport {\n  signup,\n  login,\n  removeSessionErrors,\n} from '../../actions/session_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  const formType = ownProps.location.pathname;\n  const email = state.session.email || \"\";\n  return {\n    formType: formType,\n    email: email,\n    errors: state.errors.session,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const submitForm = ownProps.location.pathname === '/signup' ?\n    signup : login;\n  \n  return {\n    submitForm: (user) => dispatch(submitForm(user)),\n    removeSessionErrors: () => dispatch(removeSessionErrors()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SessionForm);\n"
    },
    {
      "id": "user_index",
      "loc": 253,
      "group": 1,
      "content": "import React from 'react';\nimport UserIndexItem from './user_index_item';\n\nclass UserIndex extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = ({\n      selectedUserIds: [],\n      inputVal: \"\",\n      closeFlag: \"\",\n    });\n    \n    this.handleAddUser = this.handleAddUser.bind(this);\n    this.handleRemoveUser = this.handleRemoveUser.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.addTopUser = this.addTopUser.bind(this);\n    this.changeInput = this.changeInput.bind(this);\n    this.generateList = this.generateList.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleEscape = this.handleEscape.bind(this);\n  }\n  \n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleEscape, false);\n    this.props.fetchUsers();\n  }\n  \n  componentWillUnmount(nextProps, nextState) {\n    document.removeEventListener(\"keydown\", this.handleEscape, false);\n  }\n  \n  handleEscape(e) {\n    if (e.keyCode === 27) {\n      this.handleClose();\n    }\n  }\n  \n  handleClose() {\n    this.setState({ closeFlag: \"closing\" });\n    setTimeout(() => {\n      this.props.clearDropdown();\n    }, 300);\n  }\n  \n  handleAddUser(user) {\n    return () => {\n      const selectedUserIds = this.state.selectedUserIds.concat(user.id);\n      this.setState({ selectedUserIds: selectedUserIds });\n    };\n  }\n  \n  handleRemoveUser(user) {\n    return () => {\n      const userIds = this.state.selectedUserIds.slice();\n      const i = userIds.indexOf(user.id);\n      if (i > -1) {\n        userIds.splice(i, 1);\n        this.setState({ selectedUserIds: userIds });\n      }\n    };\n  }\n  \n  handleSubmit() {\n    switch (this.props.dropdown) {\n      case \"inviteIndex\":\n        this.props.subscribeUserIdsToChannel(\n          this.props.channel, this.state.selectedUserIds);\n        break;\n      case \"messageNew\":\n        const random = Math.floor(999999999 * Math.random());\n        const userIds = this.state.selectedUserIds.concat(this.props.currentUser.id);\n        \n        this.props.createChannel({\n          name: `${random}`,\n          is_private: true,\n          is_dm: true,\n        }, userIds).then(\n          response => {\n            this.props.history.push(`/channels/${response.channel.id}`);\n          }\n        );\n        break;\n      default:\n        break;\n    }\n    this.handleClose();\n  }\n  \n  changeInput(e) {\n    this.setState({ inputVal: e.target.value });\n  }\n  \n  generateList() {\n    let filteredUsers = Object.values(this.props.users).slice().reverse().filter((user) => {\n      return !this.state.selectedUserIds.includes(user.id)\n        && this.props.currentUser.id !== user.id;\n    });\n    \n    if (this.props.dropdown === \"inviteIndex\") {\n      filteredUsers = filteredUsers.filter((user) => {\n        return !Object.keys(this.props.channel.users).includes(user.id.toString());\n      });\n    }\n    \n    return filteredUsers.filter((user) => {\n      return user.username.includes(this.state.inputVal);\n    }).sort((a, b) => {\n      return b.username.toLowerCase().localeCompare(a.username.toLowerCase());\n    });\n  }\n  \n  addTopUser(e) {\n    e.preventDefault();\n    if (this.state.inputVal.length > 0) {\n      const list = this.generateList();\n      if (list.length > 0) {\n        this.handleAddUser(list[list.length - 1])();\n      }\n    }\n  }\n  \n  render () {\n    const miniUsers = this.state.selectedUserIds.map((id) => {\n      let user = this.props.users[id];\n      return (\n        <div\n          onClick={this.handleRemoveUser(user)}\n          className=\"user-index-mini-item\"\n          key={user.id}>\n          <div className=\"user-index-mini-item-icon\">\n            <img\n              className=\"profile-image-mini-half-round\"\n              src={user.avatar_url}\n              />\n          </div>\n          <div className=\"user-index-mini-item-name\">\n            {user.username}\n          </div>\n          <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n        </div>\n      );\n    });\n    \n    const filteredUsers = this.generateList();\n    \n    const users = filteredUsers.map((user) => {\n      return (\n          <UserIndexItem\n            key={user.id}\n            user={user}\n            handleAddUser={this.handleAddUser}\n            />\n        );\n    });\n    \n    let header;\n    let button;\n    switch (this.props.dropdown) {\n      case \"inviteIndex\":\n        header = `Invite others to ${this.props.channel.name}`;\n        button = \"Invite\";\n        break;\n      case \"messageNew\":\n        header = \"Direct Message\";\n        button = \"Go\";\n        break;\n      default:\n        break;\n    }\n    \n    const channelUsersCount = Object.keys(this.props.channel.users).length;\n    const userCount = Object.keys(this.props.users).length;\n    \n    const anyoneToInvite = !(filteredUsers.length === 0\n      && channelUsersCount > 0);\n    \n    \n    let noOneMessage;\n    if (!anyoneToInvite && userCount > 0) {\n      noOneMessage = (\n        <div className=\"fullscreen-subheader\">\n          {\n            this.state.selectedUserIds.length > 0 &&\n            this.state.selectedUserIds.length + this.props.channel.user_count\n              === userCount &&\n            \"There's no one else to invite!\"\n          }\n          {\n            this.props.channel.user_count === userCount &&\n            \"Looks like everyone is already in this channel!\"\n          }\n          {\n            this.state.selectedUserIds.length === 0 &&\n            this.props.channel.user_count < userCount &&\n            `No user matches '${this.state.inputVal}.'`\n          }\n        </div>\n      );\n    }\n    \n    return (\n      <div className={`fullscreen-container ${this.state.closeFlag}`}>\n        <div className={`fullscreen-inside ${this.state.closeFlag}`}>\n          <div\n            className=\"fullscreen-x\"\n            onClick={this.handleClose}>\n            \n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n            <div className=\"fullscreen-esc\">esc</div>\n          </div>\n          <div className=\"fullscreen-header\">\n            {header}\n          </div>\n          \n          { this.props.dropdown !== \"inviteIndex\" &&\n            <div className=\"fullscreen-subheader\">\n              Start a conversation\n            </div>\n          }\n          \n          <div className=\"user-index-mini\">\n            <form onSubmit={this.addTopUser}>\n              <input\n                className=\"user-index-input\"\n                value={this.state.inputVal}\n                onChange={this.changeInput}\n                type=\"text\"\n                ></input>\n            </form>\n            <div\n              onClick={this.handleSubmit}\n              className=\"user-index-mini-button\">\n              {button}\n            </div>\n          </div>\n          <div className=\"user-index-mini-list\">\n            {miniUsers}\n          </div>\n          {noOneMessage}\n          <div className=\"fullscreen-index-list-container-users custom-scroll\">\n            <ul className=\"fullscreen-index-list\">\n              {users}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserIndex;\n"
    },
    {
      "id": "user_index_container",
      "loc": 32,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport React from 'react';\nimport UserIndex from './user_index';\nimport { fetchUsers } from '../../actions/user_actions';\nimport { clearDropdown } from '../../actions/ui_actions';\nimport { createChannel,\n  subscribeUserIdsToChannel,\n} from '../../actions/channel_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    currentUser: state.session.currentUser,\n    users: state.entities.users,\n    dropdown: state.ui.dropdown,\n    channel: state.entities.channels[ownProps.match.params.channelId] || {},\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: () => dispatch(fetchUsers()),\n    createChannel: (channel, ids) => dispatch(createChannel(channel, ids)),\n    subscribeUserIdsToChannel: (channel, ids) => dispatch(subscribeUserIdsToChannel(channel, ids)),\n    clearDropdown: () => dispatch(clearDropdown()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserIndex);\n"
    },
    {
      "id": "user_index_item",
      "loc": 26,
      "group": 1,
      "content": "import React from 'react';\n\nclass UserIndexItem extends React.Component {\n  render () {\n    return (\n      <div\n        onClick={this.props.handleAddUser(this.props.user)}\n        className=\"fullscreen-index-list-li\"\n        key={this.props.user.id}>\n        <div className=\"fullscreen-index-list-item-left user\">\n          <img className=\"profile-image\"\n              src={this.props.user.avatar_url} />\n          <div className=\"fullscreen-index-list-item name\">\n            {this.props.user.username}\n          </div>\n        </div>\n        <div className=\"fullscreen-index-list-item preview user\">\n          <i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserIndexItem;\n"
    },
    {
      "id": "user_info",
      "loc": 77,
      "group": 1,
      "content": "import React from 'react';\nimport Modal from 'react-modal';\n\nclass UserInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalIsOpen: false,\n    };\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n  \n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n  \n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n  \n  handleLogout() {\n    this.props.logout();\n  }\n  \n  render () {\n    return (\n      <div>\n        <div\n          className={`sidebar-button button ${this.state.modalIsOpen ? \"selected\" : \"\"}`}\n          onClick={this.openModal}>\n          <div className=\"sidebar-button-title\">\n            Workspace  <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\n          </div>\n          \n          <div className=\"sidebar-button-subtitle\">\n            <div className=\"sidebar-button-status\">\n              <i className=\"fa fa-circle\"></i>\n            </div>\n            <div className=\"sidebar-button-name\">\n              {this.props.currentUser.username}\n            </div>\n          </div>\n        </div>\n        \n        <Modal\n          className=\"modal-interior\"\n          overlayClassName=\"modal-overlay\"\n          isOpen={this.state.modalIsOpen}\n          onRequestClose={this.closeModal}>\n          <div className=\"modal-header\">\n            <div className=\"modal-user-avatar\">\n              <img className=\"profile-image\"\n                  src={this.props.currentUser.avatar_url} />\n            </div>\n            <div\n              className=\"modal-user-username\">\n              {this.props.currentUser.username}\n            </div>\n          </div>\n          \n          <div\n            className=\"modal-button\"\n            onClick={this.handleLogout}>\n            Logout\n          </div>\n          \n        </Modal>\n      </div>\n    );\n  }\n}\n\n\nexport default UserInfo;\n"
    },
    {
      "id": "user_info_container",
      "loc": 22,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport React from 'react';\nimport UserInfo from './user_info';\nimport { logout } from '../../actions/session_actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.session.currentUser,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logout: () => dispatch(logout()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserInfo);\n"
    },
    {
      "id": "welcome_page",
      "loc": 68,
      "group": 1,
      "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass WelcomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { email: props.email };\n  }\n  \n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.receiveEmail(this.state.email);\n    this.props.history.push('/signup');\n  }\n  \n  handleChange(e) {\n    this.setState({ email: e.target.value });\n  }\n  \n  render () {\n    return (\n      <div className=\"main\">\n        <div className=\"main-left\">\n          <img src=\"\" alt=\"\" />\n        </div>\n        \n        <div className=\"main-right\">\n          <div>\n            <div className=\"main-header\">\n              Where It Happens\n            </div>\n            <div className=\"main-body\">\n              When your team needs to kick off a project, hire a new employee, deploy some code, review a sales contract, finalize next year's budget, measure an A/B test, plan your next office opening, and more, Slic has you covered.\n            </div>\n          </div>\n        \n          <form\n            className=\"main-form\"\n            onSubmit={this.handleSubmit}>\n            \n            <input\n              className=\"main-signup-input\"\n              type=\"text\"\n              value={this.state.email}\n              onChange={this.handleChange}\n              placeholder=\"Email Address\"/>\n            \n            <input\n              className=\"main-signup-button\"\n              type=\"submit\"\n              value=\"GET STARTED\" />\n          </form>\n          \n          <div className=\"welcome-alternate\">\n            Already have an account? <Link to=\"/login\">Log In</Link> or <Link to=\"/guest-login\">Guest Login</Link>\n          </div>\n          \n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default WelcomePage;\n"
    },
    {
      "id": "welcome_page_container",
      "loc": 22,
      "group": 1,
      "content": "import { connect } from 'react-redux';\nimport WelcomePage from './welcome_page';\nimport { receiveEmail } from '../../actions/session_actions';\n\nconst mapStateToProps = (state) => {\n  let email = state.session.email ? state.session.email : \"\";\n  return {\n    email: email,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    receiveEmail: (email) => dispatch(receiveEmail(email)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WelcomePage);\n"
    },
    {
      "id": "workspace",
      "loc": 143,
      "group": 1,
      "content": "import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport ChatHeaderContainer from '../chat_header/chat_header_container';\n\nimport ChannelSidebarContainer from '../channel/channel_sidebar/channel_sidebar_container';\nimport UserInfoContainer from '../user_info/user_info_container.jsx';\n\nimport ChannelFormContainer from '../channel/channel_form/channel_form_container';\nimport ChannelIndexContainer from '../channel/channel_index/channel_index_container';\nimport UserIndexContainer from '../user/user_index_container';\n\nimport MessageIndexContainer from '../message/message_index_container';\nimport ChannelDetailsContainer from '../channel/channel_details/channel_details_container';\n\nclass Workspace extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  componentDidMount() {\n    const channelId = this.props.currentUser.most_recent_channel_id;\n    \n    this.props.fetchChannels();\n    \n    if (channelId && this.props.match.path !== \"/channels/:channelId/details\") {\n      this.props.history.push(`/channels/${channelId}/details`);\n    }\n    this.props.fetchChannel(channelId);\n    this.props.receiveDetails();\n    \n    var channel = pusher.subscribe('channel-connection');\n    channel.bind('update-channel', (id) => {\n      this.props.fetchChannel(id);\n    });\n  }\n  \n  componentWillUnmount() {\n    pusher.unsubscribe('channel-connection');\n    this.props.clearChannels();\n    this.props.clearMessages();\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    const nextChannelId = nextProps.match.params.channelId;\n    const thisChannelId = this.props.match.params.channelId;\n    const channelIds = Object.keys(nextProps.channels);\n    \n    if (!channelIds.includes(nextChannelId) && channelIds.length > 0) {\n      this.props.history.push(`/channels/${this.props.currentUser.most_recent_channel_id}${this.props.details}`);\n      return;\n    }\n    \n    if (thisChannelId !== nextChannelId\n      && channelIds.includes(nextChannelId)) {\n      this.props.fetchChannel(nextChannelId);\n      this.props.clearMessages();\n      this.props.rememberCurrentChannelId(this.props.currentUser, nextChannelId);\n    }\n    \n    if (this.props.details !== nextProps.details) {\n      this.props.history.push(`/channels/${nextChannelId}${nextProps.details}`);\n    } else if (thisChannelId !== nextChannelId\n      && nextProps.details && nextProps.match.path !== \"/channels/:channelId/details\") {\n        this.props.history.push(`/channels/${nextChannelId}${nextProps.details}`);\n    }\n  }\n  \n  render () {\n    let dropdown;\n    switch (this.props.dropdown) {\n      case \"channelNew\":\n        dropdown = (\n          <Switch>\n            <Route\n              component={ChannelFormContainer}\n              path=\"/channels/:channelId\" />\n            <Route\n              component={ChannelFormContainer}\n              path=\"/\" />\n          </Switch>\n        );\n        break;\n      case \"channelIndex\":\n      case \"messageIndex\":\n        dropdown = <ChannelIndexContainer />;\n        break;\n      case \"inviteIndex\":\n      case \"messageNew\":\n        dropdown = (\n          <Switch>\n            <Route\n              component={UserIndexContainer}\n              path=\"/channels/:channelId\" />\n            <Route\n              component={UserIndexContainer}\n              path=\"/\" />\n          </Switch>\n        );\n        break;\n      default:\n        break;\n    }\n\n    \n    return (\n      <div className=\"workspace\">\n        {dropdown}\n        \n        <div className=\"sidebar\">\n          <Route\n            component={UserInfoContainer}\n            path=\"/channels/:channelId\" />\n          <Route\n            component={ChannelSidebarContainer}\n            path=\"/channels/:channelId\" />\n          <Route\n            component={UserInfoContainer}\n            exact path=\"/channels\" />\n          <Route\n            component={ChannelSidebarContainer}\n            exact path=\"/channels\" />\n        </div>\n        \n        <div className=\"chat-main\">\n          <Route\n            component={ChatHeaderContainer}\n            path=\"/channels/:channelId\" />\n          <div className=\"chat-body\">\n            <Route\n              component={MessageIndexContainer}\n              path=\"/channels/:channelId\" />\n            <Route\n              component={ChannelDetailsContainer}\n              path=\"/channels/:channelId/details\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Workspace;\n"
    },
    {
      "id": "workspace_container",
      "loc": 39,
      "group": 1,
      "content": "import Workspace from './workspace';\nimport { connect } from 'react-redux';\nimport { receiveDetails } from '../../actions/ui_actions';\nimport {\n  fetchChannels,\n  fetchChannel,\n  clearChannelErrors,\n  clearChannels,\n} from '../../actions/channel_actions';\nimport { rememberCurrentChannelId } from '../../actions/session_actions';\nimport { clearMessages } from '../../actions/message_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    currentUser: state.session.currentUser,\n    dropdown: state.ui.dropdown,\n    details: state.ui.details,\n    channels: state.entities.channels,\n    channelErrors: state.errors.channel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    receiveDetails: () => dispatch(receiveDetails()),\n    fetchChannels: () => dispatch(fetchChannels()),\n    fetchChannel: (channelId) => dispatch(fetchChannel(channelId)),\n    clearChannels: () => dispatch(clearChannels()),\n    clearMessages: () => dispatch(clearMessages()),\n    clearChannelErrors: () => dispatch(clearChannelErrors()),\n    rememberCurrentChannelId: (user, channelId) => dispatch(rememberCurrentChannelId(user, channelId)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Workspace);\n"
    },
    {
      "id": "channel_reducer",
      "loc": 40,
      "group": 2,
      "content": "import {\n  RECEIVE_ALL_CHANNELS,\n  RECEIVE_CHANNEL,\n  REMOVE_CHANNEL,\n  CLEAR_CHANNELS,\n} from '../actions/channel_actions';\nimport { RECEIVE_MESSAGE } from '../actions/message_actions';\n\nimport merge from 'lodash/merge';\n\nconst initialState = {};\n\nconst ChannelReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState;\n  \n  switch (action.type) {\n    case RECEIVE_ALL_CHANNELS:\n      return merge({}, state, action.channels);\n    case RECEIVE_CHANNEL:\n      newState = merge({}, state);\n      newState[action.channel.id] = action.channel;\n      return newState;\n    case REMOVE_CHANNEL:\n      newState = merge({}, state);\n      delete newState[action.channelId];\n      return newState;\n    case CLEAR_CHANNELS:\n      return initialState;\n    case RECEIVE_MESSAGE:\n      newState = merge({}, state);\n      newState[action.message.channel_id].most_recent_activity = action.message.created_at;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default ChannelReducer;\n"
    },
    {
      "id": "entities_reducer",
      "loc": 13,
      "group": 2,
      "content": "import { combineReducers } from 'redux';\nimport ChannelReducer from './channel_reducer';\nimport MessageReducer from './message_reducer';\nimport UserReducer from './user_reducer';\n\nconst EntitiesReducer = combineReducers({\n  channels: ChannelReducer,\n  messages: MessageReducer,\n  users: UserReducer,\n});\n\nexport default EntitiesReducer;\n"
    },
    {
      "id": "errors_reducer",
      "loc": 15,
      "group": 2,
      "content": "import { combineReducers } from 'redux';\nimport SessionErrorsReducer from './session_errors_reducer';\nimport ChannelErrorsReducer from './channel_errors_reducer';\nimport MessageErrorsReducer from './message_errors_reducer';\nimport UserErrorsReducer from './user_errors_reducer';\n\nconst ErrorsReducer = combineReducers({\n  session: SessionErrorsReducer,\n  channel: ChannelErrorsReducer,\n  message: MessageErrorsReducer,\n  user: UserErrorsReducer,\n});\n\nexport default ErrorsReducer;\n"
    },
    {
      "id": "message_errors_reducer",
      "loc": 29,
      "group": 2,
      "content": "import {\n  RECEIVE_ALL_MESSAGES,\n  RECEIVE_MESSAGE_ERRORS,\n  CLEAR_MESSAGE_ERRORS,\n  RECEIVE_MESSAGE,\n} from '../actions/message_actions';\n\nconst initialState = [];\n\nconst MessageErrorsReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  \n  switch (action.type) {\n    case RECEIVE_MESSAGE_ERRORS:\n      return action.errors.responseJSON ?\n        action.errors.responseJSON : [action.errors.responseText];\n    case RECEIVE_ALL_MESSAGES:\n      return initialState;\n    case CLEAR_MESSAGE_ERRORS:\n      return initialState;\n    case RECEIVE_MESSAGE:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default MessageErrorsReducer;\n"
    },
    {
      "id": "message_reducer",
      "loc": 31,
      "group": 2,
      "content": "import {\n  RECEIVE_ALL_MESSAGES,\n  RECEIVE_MESSAGE,\n  REMOVE_MESSAGE,\n  CLEAR_MESSAGES,\n} from '../actions/message_actions';\nimport { RECEIVE_CHANNEL } from '../actions/channel_actions';\n\nimport merge from 'lodash/merge';\n\nconst initialState = {};\n\nconst MessageReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState;\n  \n  switch (action.type) {\n    case RECEIVE_ALL_MESSAGES:\n      return action.messages;\n    case RECEIVE_MESSAGE:\n      newState = merge({}, state, { [action.message.id]: action.message });\n      return newState;\n    case CLEAR_MESSAGES:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default MessageReducer;\n"
    },
    {
      "id": "root_reducer",
      "loc": 15,
      "group": 2,
      "content": "import { combineReducers } from 'redux';\nimport SessionReducer from './session_reducer';\nimport ErrorsReducer from './errors_reducer';\nimport EntitiesReducer from './entities_reducer';\nimport UIReducer from './ui_reducer';\n\nconst RootReducer = combineReducers({\n  entities: EntitiesReducer,\n  session: SessionReducer,\n  errors: ErrorsReducer,\n  ui: UIReducer,\n});\n\nexport default RootReducer;\n"
    },
    {
      "id": "session_errors_reducer",
      "loc": 26,
      "group": 2,
      "content": "import {\n  RECEIVE_CURRENT_USER,\n  RECEIVE_SESSION_ERRORS,\n  REMOVE_SESSION_ERRORS\n} from '../actions/session_actions';\n\nconst initialState = [];\n\nconst SessionErrorsReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  \n  switch (action.type) {\n    case RECEIVE_SESSION_ERRORS:\n      return action.errors.responseJSON ?\n        action.errors.responseJSON : [action.errors.responseText];\n    case RECEIVE_CURRENT_USER:\n      return initialState;\n    case REMOVE_SESSION_ERRORS:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default SessionErrorsReducer;\n"
    },
    {
      "id": "session_reducer",
      "loc": 31,
      "group": 2,
      "content": "import {\n  RECEIVE_CURRENT_USER,\n  RECEIVE_SESSION_ERRORS,\n  RECEIVE_EMAIL,\n} from '../actions/session_actions';\nimport merge from 'lodash/merge';\n\nconst initialState = {\n  currentUser: null,\n  email: null,\n};\n\nconst SessionReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState = merge({}, state);\n  \n  switch (action.type) {\n    case RECEIVE_CURRENT_USER:\n      newState.currentUser = action.currentUser;\n      return newState;\n    case RECEIVE_EMAIL:\n      newState.email = action.email;\n      return newState;\n    default:\n      return state;\n  }\n  \n};\n\nexport default SessionReducer;\n"
    },
    {
      "id": "ui_reducer",
      "loc": 32,
      "group": 2,
      "content": "import { RECEIVE_DROPDOWN, CLEAR_DROPDOWN } from '../actions/ui_actions';\nimport { RECEIVE_DETAILS, CLEAR_DETAILS } from '../actions/ui_actions';\nimport { RECEIVE_CURRENT_USER } from '../actions/session_actions';\n\nconst initialState = {\n  dropdown: null,\n  details: \"\",\n};\n\nconst UIReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState = Object.assign({}, state);\n  switch (action.type) {\n    case RECEIVE_DETAILS:\n      newState.details = \"/details\";\n      return newState;\n    case CLEAR_DETAILS:\n      newState.details = \"\";\n      return newState;\n    case RECEIVE_DROPDOWN:\n      newState.dropdown = action.dropdown;\n      return newState;\n    case CLEAR_DROPDOWN:\n      newState.dropdown = null;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default UIReducer;\n"
    },
    {
      "id": "user_errors_reducer",
      "loc": 26,
      "group": 2,
      "content": "import {\n  RECEIVE_ALL_USERS,\n  RECEIVE_USER_ERRORS,\n  CLEAR_USER_ERRORS,\n} from '../actions/user_actions';\n\nconst initialState = [];\n\nconst UserErrorsReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  \n  switch (action.type) {\n    case RECEIVE_USER_ERRORS:\n      return action.errors.responseJSON ?\n        action.errors.responseJSON : [action.errors.responseText];\n    case RECEIVE_ALL_USERS:\n      return initialState;\n    case CLEAR_USER_ERRORS:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default UserErrorsReducer;\n"
    },
    {
      "id": "user_reducer",
      "loc": 20,
      "group": 2,
      "content": "import { RECEIVE_ALL_USERS } from '../actions/user_actions';\n\nimport merge from 'lodash/merge';\n\nconst initialState = {};\n\nconst UserReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState;\n  \n  switch (action.type) {\n    case RECEIVE_ALL_USERS:\n      return action.users;\n    default:\n      return state;\n  }\n};\n\nexport default UserReducer;\n"
    },
    {
      "id": "slic",
      "loc": 24,
      "group": 3,
      "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './store/store.js';\nimport Root from './components/root';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store;\n  if (window.currentUser) {\n    const preloadedState = {\n      session: {\n        currentUser: window.currentUser,\n        email: null,\n      }\n    };\n    store = configureStore(preloadedState);\n    delete window.currentUser;\n  } else {\n    store = configureStore();\n  }\n  \n  const root = document.getElementById('root');\n  ReactDOM.render(<Root store={store} />, root);\n});\n"
    },
    {
      "id": "channel_api_util",
      "loc": 44,
      "group": 5,
      "content": "export const fetchChannels = () => {\n  return $.ajax({\n    method: \"GET\",\n    url: `/api/channels`,\n  });\n};\n\nexport const fetchChannel = (channelId) => {\n  return $.ajax({\n    method: \"GET\",\n    url: `/api/channels/${channelId}`,\n  });\n};\n\nexport const createChannel = (channel, options = defaultOptions) => {\n  return $.ajax({\n    method: \"POST\",\n    url: `/api/channels/`,\n    data: { channel, options },\n  });\n};\n\nconst defaultOptions = {\n  change_visibility: false,\n  visible: true,\n  user_ids: [],\n  subscribe: true,\n};\n\nexport const updateChannel = (channel, options = defaultOptions) => {\n  return $.ajax({\n    method: \"PATCH\",\n    url: `/api/channels/${channel.id}`,\n    data: { channel, options },\n  });\n};\n\nexport const deleteChannel = (channelId) => {\n  return $.ajax({\n    method: \"DELETE\",\n    url: `/api/channels/${channelId}`,\n  });\n};\n"
    },
    {
      "id": "store",
      "loc": 15,
      "group": 4,
      "content": "import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport RootReducer from '../reducers/root_reducer';\n\nconst configureStore = (preloadedState = {}) => {\n  return createStore(\n    RootReducer,\n    preloadedState,\n    applyMiddleware(thunk)\n  );\n};\n\nexport default configureStore;\n"
    },
    {
      "id": "find_next_channel_id",
      "loc": 12,
      "group": 5,
      "content": "export const findNextChannelId = (channels) => {\n  const nextChannel = Object.values(channels)\n    .filter((channel) => {\n      return channel.subscribed === true;\n    })[0];\n  let nextChannelId;\n  if (nextChannel) {\n    nextChannelId = nextChannel.id;\n  }\n  return nextChannelId;\n};\n"
    },
    {
      "id": "message_api_util",
      "loc": 22,
      "group": 5,
      "content": "export const fetchMessages = (channelId) => {\n  return $.ajax({\n    method: \"GET\",\n    url: `/api/channels/${channelId}/messages`,\n  });\n};\n\nexport const fetchMessage = (messageId) => {\n  return $.ajax({\n    method: \"GET\",\n    url: `/api/messages/${messageId}`,\n  });\n};\n\nexport const createMessage = (message) => {\n  return $.ajax({\n    method: \"POST\",\n    url: `/api/messages`,\n    data: { message },\n  });\n};\n"
    },
    {
      "id": "channel_errors_reducer",
      "loc": 29,
      "group": 2,
      "content": "import {\n  RECEIVE_ALL_CHANNELS,\n  RECEIVE_CHANNEL_ERRORS,\n  CLEAR_CHANNEL_ERRORS,\n  RECEIVE_CHANNEL,\n} from '../actions/channel_actions';\n\nconst initialState = [];\n\nconst ChannelErrorsReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  \n  switch (action.type) {\n    case RECEIVE_CHANNEL_ERRORS:\n      return action.errors.responseJSON ?\n        action.errors.responseJSON : [action.errors.responseText];\n    case RECEIVE_ALL_CHANNELS:\n      return initialState;\n    case CLEAR_CHANNEL_ERRORS:\n      return initialState;\n    case RECEIVE_CHANNEL:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default ChannelErrorsReducer;\n"
    },
    {
      "id": "route_util",
      "loc": 46,
      "group": 5,
      "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\n\nconst Auth = ({ component: Component, path, loggedIn }) => {\n  return (\n    <Route\n      path={path}\n      render={(props) => (\n        loggedIn ? (\n          <Redirect to='/channels' />\n        ) : (\n          <Component {...props} />\n        )\n      )} />\n  );\n};\n\nconst Protected = ({ component: Component, path, loggedIn }) => (\n  <Route\n    path={path}\n    render={(props) => (\n      loggedIn? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    )} />\n);\n\nconst mapStateToProps = state => {\n  return { loggedIn: Boolean(state.session.currentUser) };\n};\n\nexport const AuthRoute = withRouter(\n  connect(\n    mapStateToProps,\n    null\n  )(Auth));\n\nexport const ProtectedRoute = withRouter(\n  connect(\n    mapStateToProps,\n    null\n  )(Protected));\n"
    },
    {
      "id": "session_api_util",
      "loc": 39,
      "group": 5,
      "content": "export const signup = (user) => {\n  return $.ajax({\n    method: \"POST\",\n    url: \"/api/users\",\n    data: { user },\n  });\n};\n\nexport const login = (user) => {\n  return $.ajax({\n    method: \"POST\",\n    url: \"/api/session\",\n    data: { user },\n  });\n};\n\nexport const logout = () => {\n  return $.ajax({\n    method: \"DELETE\",\n    url: \"/api/session\",\n  });\n};\n\nconst defaultUpdate = {\n  channelId: null\n};\n\nexport const updateUser = (user, channelId = null) => {\n  return $.ajax({\n    method: \"PATCH\",\n    url: `/api/users/${user.id}`,\n    data: { user: Object.assign(\n      {},\n      user,\n      { most_recent_channel_id: channelId}\n    ) },\n  });\n};\n"
    },
    {
      "id": "user_api_util",
      "loc": 7,
      "group": 5,
      "content": "export const fetchUsers = () => {\n  return $.ajax({\n    method: \"GET\",\n    url: `/api/users`,\n  });\n};\n"
    }
  ],
  "links": [
    {
      "source": "channel_api_util",
      "target": "channel_actions"
    },
    {
      "source": "message_api_util",
      "target": "message_actions"
    },
    {
      "source": "session_api_util",
      "target": "session_actions"
    },
    {
      "source": "user_api_util",
      "target": "user_actions"
    },
    {
      "source": "route_util",
      "target": "app"
    },
    {
      "source": "navbar",
      "target": "app"
    },
    {
      "source": "session_form_container",
      "target": "app"
    },
    {
      "source": "welcome_page_container",
      "target": "app"
    },
    {
      "source": "footer",
      "target": "app"
    },
    {
      "source": "workspace_container",
      "target": "app"
    },
    {
      "source": "channel_details",
      "target": "channel_details_container"
    },
    {
      "source": "ui_actions",
      "target": "channel_details_container"
    },
    {
      "source": "channel_form",
      "target": "channel_form_container"
    },
    {
      "source": "channel_actions",
      "target": "channel_form_container"
    },
    {
      "source": "ui_actions",
      "target": "channel_form_container"
    },
    {
      "source": "channel_index",
      "target": "channel_index_container"
    },
    {
      "source": "ui_actions",
      "target": "channel_index_container"
    },
    {
      "source": "channel_index_item_container",
      "target": "channel_index"
    },
    {
      "source": "channel_index_item",
      "target": "channel_index_item_container"
    },
    {
      "source": "channel_actions",
      "target": "channel_index_item_container"
    },
    {
      "source": "channel_sidebar",
      "target": "channel_sidebar_container"
    },
    {
      "source": "ui_actions",
      "target": "channel_sidebar_container"
    },
    {
      "source": "channel_sidebar_item_container",
      "target": "channel_sidebar"
    },
    {
      "source": "channel_sidebar_item",
      "target": "channel_sidebar_item_container"
    },
    {
      "source": "channel_actions",
      "target": "channel_sidebar_item_container"
    },
    {
      "source": "find_next_channel_id",
      "target": "channel_sidebar_item_container"
    },
    {
      "source": "chat_header",
      "target": "chat_header_container"
    },
    {
      "source": "channel_actions",
      "target": "chat_header_container"
    },
    {
      "source": "ui_actions",
      "target": "chat_header_container"
    },
    {
      "source": "find_next_channel_id",
      "target": "chat_header_container"
    },
    {
      "source": "message_form",
      "target": "message_form_container"
    },
    {
      "source": "message_actions",
      "target": "message_form_container"
    },
    {
      "source": "channel_actions",
      "target": "message_form_container"
    },
    {
      "source": "message_index_item_container",
      "target": "message_index"
    },
    {
      "source": "message_form_container",
      "target": "message_index"
    },
    {
      "source": "message_index",
      "target": "message_index_container"
    },
    {
      "source": "message_actions",
      "target": "message_index_container"
    },
    {
      "source": "message_index_item",
      "target": "message_index_item_container"
    },
    {
      "source": "app",
      "target": "root"
    },
    {
      "source": "session_form",
      "target": "session_form_container"
    },
    {
      "source": "session_actions",
      "target": "session_form_container"
    },
    {
      "source": "user_index_item",
      "target": "user_index"
    },
    {
      "source": "user_index",
      "target": "user_index_container"
    },
    {
      "source": "user_actions",
      "target": "user_index_container"
    },
    {
      "source": "ui_actions",
      "target": "user_index_container"
    },
    {
      "source": "channel_actions",
      "target": "user_index_container"
    },
    {
      "source": "user_info",
      "target": "user_info_container"
    },
    {
      "source": "session_actions",
      "target": "user_info_container"
    },
    {
      "source": "welcome_page",
      "target": "welcome_page_container"
    },
    {
      "source": "session_actions",
      "target": "welcome_page_container"
    },
    {
      "source": "chat_header_container",
      "target": "workspace"
    },
    {
      "source": "channel_sidebar_container",
      "target": "workspace"
    },
    {
      "source": "user_info_container",
      "target": "workspace"
    },
    {
      "source": "channel_form_container",
      "target": "workspace"
    },
    {
      "source": "channel_index_container",
      "target": "workspace"
    },
    {
      "source": "user_index_container",
      "target": "workspace"
    },
    {
      "source": "message_index_container",
      "target": "workspace"
    },
    {
      "source": "channel_details_container",
      "target": "workspace"
    },
    {
      "source": "workspace",
      "target": "workspace_container"
    },
    {
      "source": "ui_actions",
      "target": "workspace_container"
    },
    {
      "source": "channel_actions",
      "target": "workspace_container"
    },
    {
      "source": "session_actions",
      "target": "workspace_container"
    },
    {
      "source": "message_actions",
      "target": "workspace_container"
    },
    {
      "source": "channel_actions",
      "target": "channel_reducer"
    },
    {
      "source": "message_actions",
      "target": "channel_reducer"
    },
    {
      "source": "channel_reducer",
      "target": "entities_reducer"
    },
    {
      "source": "message_reducer",
      "target": "entities_reducer"
    },
    {
      "source": "user_reducer",
      "target": "entities_reducer"
    },
    {
      "source": "session_errors_reducer",
      "target": "errors_reducer"
    },
    {
      "source": "channel_errors_reducer",
      "target": "errors_reducer"
    },
    {
      "source": "message_errors_reducer",
      "target": "errors_reducer"
    },
    {
      "source": "user_errors_reducer",
      "target": "errors_reducer"
    },
    {
      "source": "message_actions",
      "target": "message_errors_reducer"
    },
    {
      "source": "message_actions",
      "target": "message_reducer"
    },
    {
      "source": "channel_actions",
      "target": "message_reducer"
    },
    {
      "source": "session_reducer",
      "target": "root_reducer"
    },
    {
      "source": "errors_reducer",
      "target": "root_reducer"
    },
    {
      "source": "entities_reducer",
      "target": "root_reducer"
    },
    {
      "source": "ui_reducer",
      "target": "root_reducer"
    },
    {
      "source": "session_actions",
      "target": "session_errors_reducer"
    },
    {
      "source": "session_actions",
      "target": "session_reducer"
    },
    {
      "source": "ui_actions",
      "target": "ui_reducer"
    },
    {
      "source": "ui_actions",
      "target": "ui_reducer"
    },
    {
      "source": "session_actions",
      "target": "ui_reducer"
    },
    {
      "source": "user_actions",
      "target": "user_errors_reducer"
    },
    {
      "source": "user_actions",
      "target": "user_reducer"
    },
    {
      "source": "store",
      "target": "slic"
    },
    {
      "source": "root",
      "target": "slic"
    },
    {
      "source": "root_reducer",
      "target": "store"
    },
    {
      "source": "channel_actions",
      "target": "channel_errors_reducer"
    }
  ]
}
